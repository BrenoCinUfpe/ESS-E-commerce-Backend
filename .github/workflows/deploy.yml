name: Deploy to Lightsail

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

      - name: Build
        run: |
          npm install
          npm run build

          echo "Build finished"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          FULL_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push $FULL_IMAGE_NAME
          echo "Image published $FULL_IMAGE_NAME"

      - name: Generate container configuration JSON from template
        run: |
          sed -e "s|IMAGE_PLACEHOLDER|${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest|g" \
              -e "s|DATABASE_URL_PLACEHOLDER|${{ secrets.DATABASE_URL }}|g" \
              -e "s|SENDGRID_API_KEY_PLACEHOLDER|${{ secrets.SENDGRID_API_KEY }}|g" \
              -e "s|EMAIL_OPTIONS_FROM_PLACEHOLDER|${{ secrets.EMAIL_OPTIONS_FROM }}|g" \
              -e "s|AT_SECRET_PLACEHOLDER|${{ secrets.AT_SECRET }}|g" \
              -e "s|RT_SECRET_PLACEHOLDER|${{ secrets.RT_SECRET }}|g" \
              -e "s|TK_EMAIL_SECRET_PLACEHOLDER|${{ secrets.TK_EMAIL_SECRET }}|g" \
              -e "s|TK_EMAIL_LIFETIME_PLACEHOLDER|${{ vars.TK_EMAIL_LIFETIME }}|g" \
              -e "s|JWT_ACCESS_LIFETIME_PLACEHOLDER|${{ vars.JWT_ACCESS_LIFETIME }}|g" \
              -e "s|JWT_REFRESH_LIFETIME_PLACEHOLDER|${{ vars.JWT_REFRESH_LIFETIME }}|g" \
              -e "s|FRONTEND_RECOVER_PASSWORD_URL_PLACEHOLDER|${{ vars.FRONTEND_RECOVER_PASSWORD_URL }}|g" \
              -e "s|FRONT_END_URL_PLACEHOLDER|${{ vars.FRONT_END_URL }}|g" \
              -e "s|API_CORREIOS_URL_PLACEHOLDER|${{ vars.API_CORREIOS_URL }}|g" \
              -e "s|ENV_PLACEHOLDER|${{ vars.ENV }}|g" \
              -e "s|APP_PORT_PLACEHOLDER|${{ vars.APP_PORT }}|g" \
              container-config-template.json > container-config.json

      - name: Deploy to Lightsail
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
        run: |
          aws lightsail update-container-service --service-name $LIGHTSAIL_SERVICE_NAME --containers file://container-config.json --public-endpoint containerName=serviceContainer,containerPort=3333,healthCheckPath="/api/health"